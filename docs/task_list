2016-09-29
    AppID定时同步:
        1、编写API视图,从pms获取所有AppID信息,写入DB      -- 已完成
        2、产品、项目的增、删、改、查视图
        2、AppID信息增加product(业务)、project(项目)、http/thrift/monitor等类型port、项目类型、编程语言
        3、管理AppID间调用方式: SOA调用  http七层代理  thrift直连  goproxy代理
        4、通过crontab定时调用api同步AppID数据

    集群配置管理:
        编写前端实现添加多个配置的功能, 区分eoc job和salt state两种方式, 可通过点击右下角的"增加"按钮添加
        通过API写入DB, eoc job需通过API从eoc中获取job id列表

    创建集群:
        集群名称、主机组命名、主机命名(扩容申请)
        从主机池中选择服务器至集群,并按照规则,自动创建主机组(分3组)
        同步主机分组、AppID信息至CMDB

    集群视图:
        展示集群信息
        状态(服务负载、集群QPS、集群流量、连接数、错误率)
        资源统计(服务器数量: 按网段、配置机型、型号)
        集群架构
        集群配置
        各主机组、主机的配置版本管理、以版本差异进行分类展示

    集群配置管理:
        重构salt配置,脱离salt-master和pillar
        配置web hook,当git版本更新时,自动获取更新,记录版本号
        按照主机组分别调用eoc job下发配置, 下发成功后,记录版本号
        批量执行成功后, 可进行重试、回滚等操作, 最终确保同一主机组内,所有主机状态一致
        建立机制,确保在配置变更时,能保持清洁,多余的文件能够随版本变更自动清理

        研究是否可通过salt自身工具,列出某state所有相关的依赖路径
        若不能实现,则通过过滤include、source字段自行解析,获取相关路径, 并在git仓库更新后,逐个路径对比版本号,确认受影响的集群。
        若均不能实现或成本过高,则可考虑更换其他版本控制方案或配置管理方案

    中间件配置管理:
        通过AppID间调用关系, 进行goproxy服务注册

    AppId配置管理:
        结合泳道信息、集群信息, 获取eless、huskar中各个AppID的配置信息, 展示出当前集群最终的业务配置
        通过API可在线更改eless、huskar中对应AppID配置


    验收:
        部署完毕后,需要对业务、中间件、主机配置进行各项检查、验收, 创建check_list
        1、可针对各个AppID、中间件、配置文件单独编写检查脚本
        2、可将存在共性的检查抽象出来,做成可配置性平台
        3、人工判断,确认
        4、由产研提供测试用例,在每次代码发布完毕后,进行检查

    集群扩容:
        若资源池存在资源,则直接划分资源至集群
        若资源池资源不足,则可先发起资源申请流程至ewf,待资源到位后,资源自动划入该集群

        资源划入集群后,创建扩容用的临时主机组
        下发配置、部署中间件、发布代码
        验收
        完成扩容(弹出提示),自动将临时主机组内资源按照分组规则,重新分组

    缩容:
        删除SOA注册信息
        关闭服务
        将主机划入资源池,从主机组内删除,并重新分组
        待过静止期后,自动发起资源回收申请


    泳道内某项目的视图:
        集群间的关系
        架构图
        状态
        资源统计


    泳道配置
        /etc/eleme/env.yaml


    泳道视图:
        项目间的关系
        架构图
        状态
        资源统计


    项目视图:
        所在泳道、集群、主机组
        资源统计
        状态


    任务管理:
        任务来源(扩容、新增、缩容、日常变更)
        执行人
        时间
        内容
        结果
        项目、主机组、集群、泳道
        历史记录
        类型(eoc、salt、业务、中间件)
        任务名称



2016-10-09
    使用ForeignKey、ManyToMany、OneToOne关系, 不使用数据库约束
    通过select_related 和 prefetch_related预载来实现数据库查询优化
    Select控件问题, 在Form中针对ForeignKey、ManyToMany、OneToOne关系, 手动指定ChoiceField来解决,不使用默认的ModelChoiceField 和ModelMultipleChoiceField
    django-rest-framework中的ManyToMany关系为read-only, 需在变更数据时, 编写方法覆盖默认方法, 维护关系表
    为实现关系表中, 维护数据变更记录, 需对所有的ManyToMany关系, 独立建立model(包含create_time、update_time), 并通过through制定

    写一个新的分页类,用于自定义数据结构

    编写一个Serialize类,能够在获取数据时,自动将关联对象的数据取出



